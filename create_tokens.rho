new basket,
  returnCh,
  entryCh,
  lookup(`rho:registry:lookup`),
  stdout(`rho:io:stdout`)
in {

  lookup!(`rho:id:REGISTRY_URI`, *entryCh) |

  for(entry <- entryCh) {
    entry!(
      {
        "type": "CREATE_TOKENS",
        // signature of the payload + contract nonce in it, with the private key of the owner (generateSignatureForNonce.js)
        "signature": "SIGNATURE",
        "payload": {
          // new nonce, must be different and random (generateNonce.js)
          "newNonce": "NEW_NONCE",
          // new nonce for the bag, must be random (generateNonce.js)
          "bagNonce": "BAG_NONCE",
          // per token price, can be Nil if the token is not for sale
          "price": PRICE,
          // The token you create can be a new one ("n" : Nil)
          // or it can be linked to an existing token data (ex: "n": "0")
          "n": TOKEN_ID,
          // quantity of tokens to create
          "quantity": QUANTITY,
          // publicKey this set of tokens (depending on quantity) will belong to
          "publicKey": "PUBLIC_KEY", // used only if new token
          // data is used only if new token ("n" : Nil)
          "data": DATA
        }
      },
      *returnCh
    )
  } |

  for (resp <- returnCh) {
    match *resp {
      true => {
        basket!({ "status": "completed" }) |
        stdout!("completed, tokens created")
      }
      _ => {
        basket!({ "status": "failed", "message": *resp }) |
        stdout!(("failed", *resp))
      }
    }
  }
}
